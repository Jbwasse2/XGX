#types:
#    - robot
#    - fridge
#art_objs:
#    cab: 0
#    fridge: 1

# Matches a string to the START of the entity ID.
action_to_entity_mapping:
  "cab":
    match_entity_type: []
    match_id_str: "cab"
    matching_skills:
      - "open_cab"
      - "close_cab"
  "fridge":
    match_entity_type: []
    match_id_str: "fridge"
    matching_skills:
      - "open_fridge"
      - "close_fridge"
  "goal":
    match_entity_type: ["goal"]
    match_id_str: ""
    matching_skills:
    - "place"
  "rigid":
    match_entity_type: ["rigid"]
    match_id_str: ""
    matching_skills:
    - "pick"

markers:
    cab_top_left: cab_push_point_7
actions:
    - name: nav
      parameters: [obj]
      task: RearrangeNavToObjTask-v0
      task_def: "nav_to_obj"
      precondition: []
      postcondition:
        - "robot_at(obj)"
      arg_specs:
        obj:
          type_match: ["rigid", "goal"]
      config_args:
        TASK.FORCE_REGENERATE: True
        TASK.SHOULD_SAVE_TO_CACHE: False

    - name: nav_to_receptacle
      parameters: [marker,obj]
      task: RearrangeNavToObjTask-v0
      task_def: "nav_to_obj"
      precondition: []
      postcondition:
        - "robot_at(marker)"
      arg_specs:
        marker:
          type_match: ["articulated_link"]
        obj:
          type_match: ["rigid", "goal"]
      config_args:
        TASK.FORCE_REGENERATE: True
        TASK.SHOULD_SAVE_TO_CACHE: False

    - name: pick
      parameters: [obj]
      task: RearrangePickTask-v0
      task_def: "pick"
      precondition:
          - "robot_at(obj)"
      postcondition:
        - "holding(obj)"
      arg_specs:
        obj:
          type_match: ["rigid"]
      config_args:
        TASK.SHOULD_ENFORCE_TARGET_WITHIN_REACH: True
        TASK.FORCE_REGENERATE: True
        TASK.BASE_ANGLE_NOISE: 0.0
        TASK.BASE_NOISE: 0.0
        TASK.SHOULD_SAVE_TO_CACHE: False

    - name: place
      parameters: [place_obj, obj]
      task: RearrangePlaceTask-v0
      task_def: "place"
      precondition:
          - "holding(place_obj)"
          - "robot_at(obj)"
      postcondition:
          - "not_holding()"
          - "at(place_obj,obj)"
      arg_specs:
        place_obj:
          type_match: ["rigid"]
        obj:
          type_match: ["goal"]
      config_args:
        TASK.SHOULD_ENFORCE_TARGET_WITHIN_REACH: True
        TASK.FORCE_REGENERATE: True
        TASK.BASE_ANGLE_NOISE: 0.0
        TASK.BASE_NOISE: 0.0
        TASK.SHOULD_SAVE_TO_CACHE: False

    # Fridge
    - name: open_fridge
      parameters: [obj]
      task_def: "open_fridge"
      task: RearrangeOpenFridgeTask-v0
      precondition: ["robot_at(MARKER_fridge_push_point)", "closed_fridge()", "in(obj,MARKER_fridge_push_point)"]
      postcondition: ["opened_fridge()"]
      arg_specs:
        obj:
          type_match: ["rigid", "goal"]
      add_task_args:
        marker: "MARKER_fridge_push_point"
      config_args:
        TASK.BASE_ANGLE_NOISE: 0.0
        TASK.SPAWN_REGION_SCALE: 0.0

    - name: close_fridge
      parameters: [obj]
      task_def: "close_fridge"
      task: RearrangeCloseFridgeTask-v0
      precondition: ["robot_at(MARKER_fridge_push_point)","opened_fridge()", "in(obj,MARKER_fridge_push_point)"]
      postcondition: ["closed_fridge()"]
      arg_specs:
        obj:
          type_match: ["rigid", "goal"]
      add_task_args:
        marker: "MARKER_fridge_push_point"
      config_args:
        TASK.BASE_ANGLE_NOISE: 0.0
        TASK.SPAWN_REGION_SCALE: 0.0

    # Cab
    - name: open_cab
      parameters: [marker, obj]
      task_def: "open_cab"
      task: RearrangeOpenDrawerTask-v0
      precondition: ["robot_at(marker)","closed_cab(marker)", "in(obj,marker)"]
      postcondition: ["opened_cab(marker)"]
      arg_specs:
        marker:
          name_match: "cab_push_point_5"
        obj:
          type_match: ["rigid", "goal"]
      config_args:
        TASK.BASE_ANGLE_NOISE: 0.0
        TASK.SPAWN_REGION_SCALE: 0.0

    - name: close_cab
      parameters: [marker, obj]
      task_def: "close_cab"
      task: RearrangeCloseDrawerTask-v0
      precondition: ["robot_at(marker)","opened_cab(marker)", "in(obj,marker)"]
      postcondition: ["closed_cab(marker)"]
      arg_specs:
        marker:
          name_match: "cab_push_point_5"
        obj:
          type_match: ["rigid", "goal"]
      config_args:
        TASK.BASE_ANGLE_NOISE: 0.0
        TASK.SPAWN_REGION_SCALE: 0.0
predicates:
    - name: in
      args: [X, Y]
      state:
        check_for_art_link_match:
          MARKER_fridge_push_point: False
        obj_states:
          X: Y

    - name: holding
      args: [X]
      state:
        robo:
            holding: "X"
    - name: not_holding
      state:
        robo:
            holding: 'NONE'
    - name: opened_cab
      args: [cab_id]
      state:
        arg_spec:
          name_match: "cab"
        art_states:
          cab_id: "ArtSampler(value=0.45, cmp='greater')"

    - name: closed_cab
      args: [cab_id]
      state:
        arg_spec:
          name_match: "cab"
        art_states:
          cab_id: 0.0

    - name: opened_fridge
      state:
        art_states:
          MARKER_fridge_push_point: "ArtSampler(value=1.22, cmp='greater')"

    - name: closed_fridge
      state:
        art_states:
          MARKER_fridge_push_point: 0.0

    - name: robot_at
      args: [Y]
      state:
        robo:
            pos: Y
    - name: at
      args: [X,Y]
      state:
          obj_states:
              X: Y
